{"ast":null,"code":"import { flow, deepAssign } from '../../utils';\nimport { theme, animation, annotation, tooltip } from '../../adaptor/common';\nimport { line, point } from '../../adaptor/geometries';\nimport { meta } from '../tiny-area/adaptor';\nimport { getTinyData } from './utils';\nimport { X_FIELD, Y_FIELD } from './constants';\nexport { meta };\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      color = options.color,\n      lineStyle = options.lineStyle,\n      pointMapping = options.point;\n  var pointState = pointMapping === null || pointMapping === void 0 ? void 0 : pointMapping.state;\n  var seriesData = getTinyData(data);\n  chart.data(seriesData); // line geometry 处理\n\n  var primary = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      line: {\n        color: color,\n        style: lineStyle\n      },\n      point: pointMapping\n    }\n  });\n  var pointParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  });\n  line(primary);\n  point(pointParams);\n  chart.axis(false);\n  chart.legend(false);\n  return params;\n}\n/**\n * 迷你折线图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(geometry, meta, theme, tooltip, animation, annotation())(params);\n}","map":{"version":3,"mappings":"AACA,SAASA,IAAT,EAAeC,UAAf,QAAiC,aAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,OAAvC,QAAsD,sBAAtD;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,0BAA5B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,aAAjC;AAEA,SAASH,IAAT;AAEA;;;;;AAIA,SAASI,QAAT,CAAkBC,MAAlB,EAAiD;EACvC,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,QAAI,GAA4CC,OAAO,KAAvD;EAAA,IAAMC,KAAK,GAAqCD,OAAO,MAAvD;EAAA,IAAaE,SAAS,GAA0BF,OAAO,UAAvD;EAAA,IAA+BG,YAAY,GAAKH,OAAO,MAAvD;EAER,IAAMI,UAAU,GAAGD,YAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEE,KAAjC;EAEA,IAAMC,UAAU,GAAGX,WAAW,CAACY,IAAD,CAA9B;EAEAC,KAAK,CAACD,IAAN,CAAWD,UAAX,EAR+C,CAU/C;;EACA,IAAMG,OAAO,GAAGtB,UAAU,CAAC,EAAD,EAAKY,MAAL,EAAa;IACrCC,OAAO,EAAE;MACPU,MAAM,EAAEd,OADD;MAEPe,MAAM,EAAEd,OAFD;MAGPL,IAAI,EAAE;QACJS,KAAK,OADD;QAEJW,KAAK,EAAEV;MAFH,CAHC;MAOPT,KAAK,EAAEU;IAPA;EAD4B,CAAb,CAA1B;EAWA,IAAMU,WAAW,GAAG1B,UAAU,CAAC,EAAD,EAAKsB,OAAL,EAAc;IAAET,OAAO,EAAE;MAAET,OAAO,EAAE,KAAX;MAAkBc,KAAK,EAAED;IAAzB;EAAX,CAAd,CAA9B;EAEAZ,IAAI,CAACiB,OAAD,CAAJ;EACAhB,KAAK,CAACoB,WAAD,CAAL;EAEAL,KAAK,CAACM,IAAN,CAAW,KAAX;EACAN,KAAK,CAACO,MAAN,CAAa,KAAb;EAEA,OAAOhB,MAAP;AACD;AAED;;;;;;;AAKA,OAAM,SAAUiB,OAAV,CAAkBjB,MAAlB,EAAiD;EACrD,OAAOb,IAAI,CAACY,QAAD,EAAWJ,IAAX,EAAiBN,KAAjB,EAAwBG,OAAxB,EAAiCF,SAAjC,EAA4CC,UAAU,EAAtD,CAAJ,CAA8DS,MAA9D,CAAP;AACD","names":["flow","deepAssign","theme","animation","annotation","tooltip","line","point","meta","getTinyData","X_FIELD","Y_FIELD","geometry","params","options","color","lineStyle","pointMapping","pointState","state","seriesData","data","chart","primary","xField","yField","style","pointParams","axis","legend","adaptor"],"sources":["E:\\office_react\\Context_Practice\\Context-Frontent_practice\\node_modules\\@antv\\g2plot\\src\\plots\\tiny-line\\adaptor.ts"],"sourcesContent":["import { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { theme, animation, annotation, tooltip } from '../../adaptor/common';\nimport { line, point } from '../../adaptor/geometries';\nimport { meta } from '../tiny-area/adaptor';\nimport { getTinyData } from './utils';\nimport { TinyLineOptions } from './types';\nimport { X_FIELD, Y_FIELD } from './constants';\n\nexport { meta };\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TinyLineOptions>): Params<TinyLineOptions> {\n  const { chart, options } = params;\n  const { data, color, lineStyle, point: pointMapping } = options;\n\n  const pointState = pointMapping?.state;\n\n  const seriesData = getTinyData(data);\n\n  chart.data(seriesData);\n\n  // line geometry 处理\n  const primary = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      line: {\n        color,\n        style: lineStyle,\n      },\n      point: pointMapping,\n    },\n  });\n  const pointParams = deepAssign({}, primary, { options: { tooltip: false, state: pointState } });\n\n  line(primary);\n  point(pointParams);\n\n  chart.axis(false);\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * 迷你折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TinyLineOptions>) {\n  return flow(geometry, meta, theme, tooltip, animation, annotation())(params);\n}\n"]},"metadata":{},"sourceType":"module"}