{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { uniq } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { deepAssign, findViewById, flow } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { transformToViewsData } from './helper';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID } from './constant';\n/**\n * 默认配置项 处理\n * @param params\n */\n\nfunction defaultOptions(params) {\n  var options = params.options;\n  var _a = options.rawFields,\n      rawFields = _a === void 0 ? [] : _a;\n  return deepAssign({}, {\n    options: {\n      tooltip: {\n        fields: uniq(__spreadArrays(['name', 'source', 'target', 'value', 'isNode'], rawFields))\n      },\n      label: {\n        fields: uniq(__spreadArrays(['x', 'name'], rawFields))\n      }\n    }\n  }, params);\n}\n/**\n * geometry 处理\n * @param params\n */\n\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var color = options.color,\n      nodeStyle = options.nodeStyle,\n      edgeStyle = options.edgeStyle,\n      label = options.label,\n      tooltip = options.tooltip,\n      nodeState = options.nodeState,\n      edgeState = options.edgeState; // 1. 组件，优先设置，因为子 view 会继承配置\n\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false); // y 镜像一下，防止图形顺序和数据顺序反了\n\n  chart.coordinate().reflect('y'); // 2. node edge views\n  // @ts-ignore\n\n  var _a = transformToViewsData(options, chart.width, chart.height),\n      nodes = _a.nodes,\n      edges = _a.edges; // edge view\n\n\n  var edgeView = chart.createView({\n    id: EDGES_VIEW_ID\n  });\n  edgeView.data(edges);\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color: color,\n        style: edgeStyle,\n        shape: 'arc'\n      },\n      tooltip: tooltip,\n      state: edgeState\n    }\n  });\n  var nodeView = chart.createView({\n    id: NODES_VIEW_ID\n  });\n  nodeView.data(nodes);\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color: color,\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: tooltip,\n      state: nodeState\n    }\n  });\n  chart.interaction('element-active'); // scale\n\n  chart.scale({\n    x: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    y: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    name: {\n      sync: 'color',\n      type: 'cat'\n    }\n  });\n  return params;\n}\n/**\n * 动画\n * @param params\n */\n\n\nexport function animation(params) {\n  var chart = params.chart,\n      options = params.options;\n  var animation = options.animation; // 同时设置整个 view 动画选项\n\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n\n  var geometries = __spreadArrays(chart.views[0].geometries, chart.views[1].geometries); // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n\n\n  geometries.forEach(function (g) {\n    g.animate(animation);\n  });\n  return params;\n}\n/**\n * 节点拖动\n * @param params\n */\n\nexport function nodeDraggable(params) {\n  var chart = params.chart,\n      options = params.options;\n  var nodeDraggable = options.nodeDraggable;\n  var DRAG_INTERACTION = 'sankey-node-draggable';\n\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n\n  return params;\n}\n/**\n * Interaction 配置\n * @param params\n */\n\nfunction interaction(params) {\n  var chart = params.chart,\n      options = params.options;\n  var _a = options.interactions,\n      interactions = _a === void 0 ? [] : _a;\n  var nodeInteractions = [].concat(interactions, options.nodeInteractions || []);\n  var edgeInteractions = [].concat(interactions, options.edgeInteractions || []);\n  var nodeView = findViewById(chart, NODES_VIEW_ID);\n  var edgeView = findViewById(chart, EDGES_VIEW_ID);\n  nodeInteractions.forEach(function (i) {\n    if ((i === null || i === void 0 ? void 0 : i.enable) === false) {\n      nodeView.removeInteraction(i.type);\n    } else {\n      nodeView.interaction(i.type, i.cfg || {});\n    }\n  });\n  edgeInteractions.forEach(function (i) {\n    if ((i === null || i === void 0 ? void 0 : i.enable) === false) {\n      edgeView.removeInteraction(i.type);\n    } else {\n      edgeView.interaction(i.type, i.cfg || {});\n    }\n  });\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(defaultOptions, geometry, interaction, nodeDraggable, animation, theme // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"mappings":"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","names":["uniq","theme","deepAssign","findViewById","flow","polygon","edge","transformToViewsData","X_FIELD","Y_FIELD","COLOR_FIELD","EDGES_VIEW_ID","NODES_VIEW_ID","defaultOptions","params","options","_a","tooltip","fields","rawFields","label","geometry","nodeStyle","edgeStyle","nodeState","edgeState","chart","legend","axis","coordinate","reflect","width","height","nodes","edges","edgeView","createView","id","data","xField","yField","seriesField","color","style","shape","state","nodeView","interaction","scale","x","sync","nice","min","max","minLimit","maxLimit","y","name","type","animation","animate","geometries","views","forEach","g","nodeDraggable","DRAG_INTERACTION","removeInteraction","nodeInteractions","concat","interactions","edgeInteractions","i","enable","cfg","adaptor"],"sources":["E:\\office_react\\Context_Practice\\Context-Frontent_practice\\node_modules\\@antv\\g2plot\\src\\plots\\sankey\\adaptor.ts"],"sourcesContent":["import { uniq } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, findViewById, flow } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { transformToViewsData } from './helper';\nimport { SankeyOptions } from './types';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID } from './constant';\n\n/**\n * 默认配置项 处理\n * @param params\n */\nfunction defaultOptions(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { options } = params;\n  const { rawFields = [] } = options;\n\n  return deepAssign(\n    {},\n    {\n      options: {\n        tooltip: {\n          fields: uniq(['name', 'source', 'target', 'value', 'isNode', ...rawFields]),\n        },\n        label: {\n          fields: uniq(['x', 'name', ...rawFields]),\n        },\n      },\n    },\n    params\n  );\n}\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { color, nodeStyle, edgeStyle, label, tooltip, nodeState, edgeState } = options;\n\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n  // y 镜像一下，防止图形顺序和数据顺序反了\n  chart.coordinate().reflect('y');\n\n  // 2. node edge views\n  // @ts-ignore\n  const { nodes, edges } = transformToViewsData(options, chart.width, chart.height);\n\n  // edge view\n  const edgeView = chart.createView({ id: EDGES_VIEW_ID });\n  edgeView.data(edges);\n\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color,\n        style: edgeStyle,\n        shape: 'arc',\n      },\n      tooltip,\n      state: edgeState,\n    },\n  });\n\n  const nodeView = chart.createView({ id: NODES_VIEW_ID });\n  nodeView.data(nodes);\n\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color,\n        style: nodeStyle,\n      },\n      label,\n      tooltip,\n      state: nodeState,\n    },\n  });\n\n  chart.interaction('element-active');\n\n  // scale\n  chart.scale({\n    x: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    y: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    name: { sync: 'color', type: 'cat' },\n  });\n\n  return params;\n}\n\n/**\n * 动画\n * @param params\n */\nexport function animation(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { animation } = options;\n\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n\n  const geometries = [...chart.views[0].geometries, ...chart.views[1].geometries];\n\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  geometries.forEach((g) => {\n    g.animate(animation);\n  });\n\n  return params;\n}\n\n/**\n * 节点拖动\n * @param params\n */\nexport function nodeDraggable(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { nodeDraggable } = options;\n\n  const DRAG_INTERACTION = 'sankey-node-draggable';\n\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n\n  return params;\n}\n\n/**\n * Interaction 配置\n * @param params\n */\nfunction interaction(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { interactions = [] } = options;\n\n  const nodeInteractions = [].concat(interactions, options.nodeInteractions || []);\n  const edgeInteractions = [].concat(interactions, options.edgeInteractions || []);\n\n  const nodeView = findViewById(chart, NODES_VIEW_ID);\n  const edgeView = findViewById(chart, EDGES_VIEW_ID);\n\n  nodeInteractions.forEach((i) => {\n    if (i?.enable === false) {\n      nodeView.removeInteraction(i.type);\n    } else {\n      nodeView.interaction(i.type, i.cfg || {});\n    }\n  });\n\n  edgeInteractions.forEach((i) => {\n    if (i?.enable === false) {\n      edgeView.removeInteraction(i.type);\n    } else {\n      edgeView.interaction(i.type, i.cfg || {});\n    }\n  });\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<SankeyOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    defaultOptions,\n    geometry,\n    interaction,\n    nodeDraggable,\n    animation,\n    theme\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module"}